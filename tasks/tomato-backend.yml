- name: Ensure projects directory exists
  file:
    path: "{{ ansible_env.HOME }}/projects"
    state: directory
    mode: '0755'
  tags: tomato

- name: Clone tomato-2.0 backend repository
  git:
    repo: 'git@github.com:tomatoai-dev/tomato-2.0.git'
    dest: "{{ ansible_env.HOME }}/projects/back"
    version: dev
    accept_hostkey: yes
  environment:
    GIT_SSH_COMMAND: "ssh -vvv"
  tags: tomato

- name: Clone private Gist for backend .env file
  git:
    repo: 'git@gist.github.com:ddc96d31c7b4e12bc6036357b42cc0ad.git'
    dest: "{{ ansible_env.HOME }}/projects/back/gist_env"
    version: main
    accept_hostkey: yes
  environment:
    GIT_SSH_COMMAND: "ssh -vvv"
  tags: tomato

- name: Copy .env file from cloned Gist to backend
  command: cp gist_env/.env backend/.env
  args:
    chdir: "{{ ansible_env.HOME }}/projects/back"
  tags: tomato

- name: Remove Gist directory
  file:
    path: "{{ ansible_env.HOME }}/projects/back/gist_env"
    state: absent
  tags: tomato

- name: Checkout staging branch
  command: git checkout staging
  args:
    chdir: "{{ ansible_env.HOME }}/projects/back"
  register: git_checkout_result
  changed_when: "'Already on' not in git_checkout_result.stdout"
  tags: tomato

- name: Pull latest changes from staging
  command: git pull origin staging
  args:
    chdir: "{{ ansible_env.HOME }}/projects/back"
  register: git_pull_result
  tags: tomato

- name: Create Python virtual environment
  command: python3 -m venv .venv
  args:
    chdir: "{{ ansible_env.HOME }}/projects/back"
    creates: "{{ ansible_env.HOME }}/projects/back/.venv"
  tags:
    - tomato
    - venv

- name: Build Docker container without starting
  command: docker-compose build
  args:
    chdir: "{{ ansible_env.HOME }}/projects/back"
  register: docker_build_output
  tags:
    - tomato
    - docker-build

- name: Debug Docker build output
  debug:
    var: docker_build_output.stdout_lines
  tags: 
    - tomato
    - docker-build

